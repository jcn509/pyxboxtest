"""Tests for :py:class:`~pyxboxtest.xqemu.xqemu_params`"""
from typing import Any, NamedTuple, Tuple

import pytest

from pyxboxtest.xqemu import (
    NetworkTransportProtocol,
    XQEMUFirmware,
    XQEMUNetworkForwardRule,
)


@pytest.mark.parametrize(
    "invalid_mcpx_filename,invalid_bios_filename",
    (("not a real file", __file__), (__file__, "not a real file"),),
)
def test_xqemu_firmware_invalid_filenames(
    invalid_mcpx_filename: str, invalid_bios_filename: str
):
    """Ensures that an exception is thrown by
    :py:class:`~pyxboxtest.xqemu.xqemu_params:XQEMUFirmware`
    if invalid filenames are used
    """
    with pytest.raises(ValueError):
        XQEMUFirmware(invalid_mcpx_filename, invalid_bios_filename)


def test_xqemu_firmware_valid_params():
    """Ensures that no exception is thrown by
    :py:class:`~pyxboxtest.xqemu.xqemu_params:XQEMUFirmware`
    if valid filenames are used
    """
    XQEMUFirmware(__file__, __file__)


class XQEMUFirmwareParametersTestParams(NamedTuple):
    """All the data needed to test that the correct arguments are generated by
    :py:class:`~pyxboxtest.xqemu.xqemu_params:XQEMUFirmware`

    This class exists for type checking purposes only
    """

    mcpx_rom_filename: str
    bios_filename: str
    short_animation: bool
    expected_parameters: Tuple[str, ...]


@pytest.mark.parametrize(
    "mcpx_rom_filename,bios_filename,short_animation,expected_parameters",
    (
        XQEMUFirmwareParametersTestParams(
            "mcpx", "bios", False, ("-machine", "xbox,bootrom=mcpx", "-bios", "bios")
        ),
        XQEMUFirmwareParametersTestParams(
            "~/somedir/mxpc.rom",
            "/etc/other/bios.bin",
            False,
            (
                "-machine",
                "xbox,bootrom=~/somedir/mxpc.rom",
                "-bios",
                "/etc/other/bios.bin",
            ),
        ),
        XQEMUFirmwareParametersTestParams(
            "mcpx",
            "bios",
            True,
            ("-machine", "xbox,bootrom=mcpx,short_animation", "-bios", "bios"),
        ),
        XQEMUFirmwareParametersTestParams(
            "~/somedir/mxpc.rom",
            "/etc/other/bios.bin",
            True,
            (
                "-machine",
                "xbox,bootrom=~/somedir/mxpc.rom,short_animation",
                "-bios",
                "/etc/other/bios.bin",
            ),
        ),
    ),
)
def test_xqemu_firmware_generates_correct_arguments(
    mocker,
    mcpx_rom_filename: str,
    bios_filename: str,
    short_animation: bool,
    expected_parameters: Tuple[str, ...],
):
    """Ensures that the correct arguments are generated by
    :py:class:`~pyxboxtest.xqemu.xqemu_params:XQEMUFirmware`
    """
    # We don't want to have to worry about invalid filenames right now
    mocker.patch("pyxboxtest.xqemu.xqemu_params._validate_filename")
    xqemu_firmware = XQEMUFirmware(
        mcpx_rom_filename, bios_filename, short_boot_animation=short_animation
    )
    assert xqemu_firmware.get_command_line_args() == expected_parameters


@pytest.mark.parametrize(
    "network_forward_rule,expected_str",
    (
        (XQEMUNetworkForwardRule(21, 44), "user,hostfwd=tcp::44-:21"),
        (
            XQEMUNetworkForwardRule(21, 44, NetworkTransportProtocol.UDP),
            "user,hostfwd=udp::44-:21",
        ),
        (
            XQEMUNetworkForwardRule(
                500, 22, xbox_ip="100.101.120.9", forward_to_ip="12.34.56.78"
            ),
            "user,hostfwd=tcp:12.34.56.78:22-100.101.120.9:500",
        ),
    ),
)
def test_xqemu_network_forward_rule_get_rule_str(
    network_forward_rule: XQEMUNetworkForwardRule, expected_str: str,
):
    """Ensure that
    :py:class:`~pyxboxtest.xqemu.xqemu_params.XQEMUNetworkForwardRule` gives
    the correct string
    """
    assert network_forward_rule.get_rule_str() == expected_str


@pytest.mark.parametrize(
    "xbox_port,forward_to_port", ((-1, 0), (-1, 44), (1, -1),),
)
def test_xqemu_network_forward_rule_invalid_port_numbers(
    xbox_port: int, forward_to_port: int
):
    """Ensure that
    :py:class:`~pyxboxtest.xqemu.xqemu_params.XQEMUNetworkForwardRule` throws
    an exception if given invalid parameters
    """
    with pytest.raises(ValueError):
        XQEMUNetworkForwardRule(xbox_port, forward_to_port)


@pytest.mark.parametrize(
    "xbox_ip,forward_to_ip",
    (
        ("Some random string", None),
        (None, "Some random string"),
        ("Some random string", "100.101.120.9"),
        ("100.101.120.9", "Some random string"),
        ("256.101.120.9", "100.101.120.9"),
        ("200.101.120.9", "100.101.120.256"),
        ("255.01.120.9", "100.101.120.9"),
        ("100.101.120.9", "100.101.120.009"),
    ),
)
def test_xqemu_network_forward_rule_invalid_ip_addresses(
    xbox_ip: str, forward_to_ip: str
):
    """Ensure that
    :py:class:`~pyxboxtest.xqemu.xqemu_params.XQEMUNetworkForwardRule` throws
    an exception if given invalid parameters
    """
    with pytest.raises(ValueError):
        XQEMUNetworkForwardRule(1, 2, xbox_ip=xbox_ip, forward_to_ip=forward_to_ip)
